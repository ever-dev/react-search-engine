{"version":3,"file":"static/js/669.74b3d86e.chunk.js","mappings":"0KAOA,EAPkB,CAChBA,KAAM,CACJC,cAAeC,2BACfC,MAAOD,qCCsCEE,EAAiB,SAACC,GAAD,OAC5BC,EAAAA,EAAAA,UAAwB,CAAC,QAASD,IAAQ,kBANxB,SAAC,GAAD,IAAGA,EAAH,EAAGA,MAAOE,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,OAAjB,OAClBC,MAAM,gDAAD,OAC6CC,EAAAA,KAAAA,MAD7C,cACuEL,EADvE,kBACsFE,EADtF,mBACsGC,IACzGG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAG4BC,CAAYT,O,SCnC/C,SAASU,EAAT,GAAwC,IAAD,EAAhBV,EAAgB,EAAhBA,MACpC,EAA4BD,EAAe,CACzCC,MAAAA,EACAE,MAAO,EACPC,OAAQ,IAHFQ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAMd,OACE,SAAC,IAAD,CAAeC,IAAI,QAAQD,UAAWA,EAAtC,UACE,gBAAKE,UAAU,mCAAf,gBACGH,QADH,IACGA,GADH,UACGA,EAAMA,YADT,aACG,EAAYI,KAAI,SAACC,GAAD,OACf,iBAEEF,UAAU,yDAFZ,WAIE,mBACED,IAAKG,EAAKC,UACVC,YAAY,IACZJ,UAAU,cACVK,iBAAe,EACfC,MAAOJ,EAAKK,QAGd,gBAAKP,UAAU,YACf,iBAAKA,UAAU,oCAAf,WACE,uCAAeE,EAAKM,WACpB,cACER,UAAU,oCACVS,KAAMP,EAAKQ,IACXC,OAAO,SACPC,IAAI,aAJN,uBAdGV,EAAKW,WCoBtB,IAKaC,EAAyB,SAAC5B,GAAD,OACpCC,EAAAA,EAAAA,UAAgC,CAAC,gBAAiBD,IAAQ,kBANhC,SAAC,GAAD,IAAGA,EAAH,EAAGA,MAAO6B,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,SAAhB,OAC1B1B,MAAM,gDAAD,OAC6CC,EAAAA,KAAAA,cAD7C,oCACqGwB,EADrG,qBACsHC,EADtH,8CACoK9B,EADpK,oBAEHM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAIlBuB,CAAoB/B,OCvCT,SAASgC,EAAT,GAAgD,IAAD,EAAhBhC,EAAgB,EAAhBA,MAC5C,EAA4B4B,EAAuB,CACjD5B,MAAAA,EACA6B,KAAM,EACNC,SAAU,IAHJnB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAMd,OACE,SAAC,IAAD,CAAeC,IAAI,gBAAgBD,UAAWA,EAA9C,UACE,gBAAKE,UAAU,mCAAf,gBACGH,QADH,IACGA,GADH,UACGA,EAAMsB,aADT,aACG,EAAalB,KAAI,SAACC,GAAD,OAChB,iBAEEF,UAAU,yDAFZ,WAIE,iBAAKA,UAAU,yBAAf,WACE,gBACED,IAAKG,EAAKkB,MAAMC,cAChBrB,UAAU,mCACVsB,MAAO,GACPC,OAAQ,GACRC,IAAKtB,EAAKkB,MAAMK,gBAElB,iBAAMzB,UAAU,OAAhB,SAAwBE,EAAKkB,MAAMK,mBAErC,cACEC,wBAAyB,CAAEC,OAAQzB,EAAKI,OACxCN,UAAU,UAEZ,gBAAKA,UAAU,YACf,iBAAKA,UAAU,oCAAf,WACE,sCAAcE,EAAK0B,eACnB,cACE5B,UAAU,oCACVS,KAAMP,EAAK2B,KACXlB,OAAO,SACPC,IAAI,aAJN,uBApBGV,EAAK4B,oBCfP,SAASC,IAAU,IAAD,EACzBC,GAAWC,EAAAA,EAAAA,MAEX/C,EAAK,UADI,IAAIgD,gBAAgBF,EAASG,QACvBC,IAAI,YAAd,QAAsB,GAEjC,OACE,4BACE,SAAClB,EAAD,CAAqBhC,MAAOA,KAC5B,SAACU,EAAD,CAAaV,MAAOA","sources":["appConfig.ts","services/giphy.ts","pages/search/giphy.tsx","services/stackoverflow.ts","pages/search/stackoverflow.tsx","pages/search/index.tsx"],"sourcesContent":["const appConfig = {\n  keys: {\n    stackoverflow: process.env.REACT_APP_STACKOVERFLOW_KEY,\n    giphy: process.env.REACT_APP_GIPHY_KEY,\n  },\n};\n\nexport default appConfig;\n","import { useQuery } from \"react-query\";\nimport appConfig from \"../appConfig\";\n\ninterface QueryFilter {\n  query: string;\n  limit: number;\n  offset: number;\n}\n\ninterface GiphyResponse {\n  data: Array<{\n    type: string;\n    id: string;\n    url: string;\n    slug: string;\n    bitly_gif_url: string;\n    bitly_url: string;\n    embed_url: string;\n    username: string;\n    source: string;\n    title: string;\n    rating: string;\n    content_url: string;\n    source_tld: string;\n    source_post_url: string;\n    is_sticker: boolean;\n    import_datetime: string;\n    trending_datetime: string;\n  }>;\n  pagination: {\n    total_count: number;\n    count: number;\n    offset: number;\n  };\n}\n\nconst searchGiphy = ({ query, limit, offset }: QueryFilter) =>\n  fetch(\n    `https://api.giphy.com/v1/gifs/search?api_key=${appConfig.keys.giphy}&q=${query}&limit=${limit}&offset=${offset}`\n  ).then((res) => res.json());\n\nexport const useSearchGiphy = (query: QueryFilter) =>\n  useQuery<GiphyResponse>([\"giphy\", query], () => searchGiphy(query));\n","import { SearchResults } from \"../../components\";\nimport { useSearchGiphy } from \"../../services/giphy\";\n\ninterface Props {\n  query: string;\n}\n\nexport default function GiphySearch({ query }: Props) {\n  const { data, isLoading } = useSearchGiphy({\n    query,\n    limit: 5,\n    offset: 0,\n  });\n\n  return (\n    <SearchResults src=\"GIPHY\" isLoading={isLoading}>\n      <div className=\"flex p-4 overflow-auto flex-wrap\">\n        {data?.data?.map((item) => (\n          <div\n            key={item.id}\n            className=\"m-2 p-4 border border-solid rounded w-80 flex flex-col\"\n          >\n            <iframe\n              src={item.embed_url}\n              frameBorder=\"0\"\n              className=\"giphy-embed\"\n              allowFullScreen\n              title={item.slug}\n            ></iframe>\n\n            <div className=\"flex-1\" />\n            <div className=\"flex items-center justify-between\">\n              <span>Rating: {item.rating}</span>\n              <a\n                className=\"text-sky-600 underline text-right\"\n                href={item.url}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Show\n              </a>\n            </div>\n          </div>\n        ))}\n      </div>\n    </SearchResults>\n  );\n}\n","import { useQuery } from \"react-query\";\nimport appConfig from \"../appConfig\";\n\ninterface QueryFilter {\n  query: string;\n  page: number;\n  pageSize: number;\n}\n\ninterface StackoverflowResponse {\n  has_more: boolean;\n  items: Array<{\n    accepted_answer_id: number;\n    answer_count: number;\n    content_license: string;\n    creation_date: number;\n    is_answered: boolean;\n    last_activity_date: number;\n    last_edit_date: number;\n    link: string;\n    owner: {\n      account_id: number;\n      display_name: string;\n      link: string;\n      profile_image: string;\n      reputation: number;\n      user_id: number;\n      user_type: string;\n    };\n    question_id: number;\n    score: number;\n    tags: Array<string>;\n    title: string;\n    view_count: number;\n  }>;\n  quota_max: number;\n  quota_remaining: number;\n}\n\nconst searchStackoverflow = ({ query, page, pageSize }: QueryFilter) =>\n  fetch(\n    `https://api.stackexchange.com/2.3/search?key=${appConfig.keys.stackoverflow}&site=stackoverflow&page=${page}&pagesize=${pageSize}&order=desc&sort=relevance&intitle=${query}&filter=default`\n  ).then((res) => res.json());\n\nexport const useSearchStackoverflow = (query: QueryFilter) =>\n  useQuery<StackoverflowResponse>([\"stackoverflow\", query], () =>\n    searchStackoverflow(query)\n  );\n","import { SearchResults } from \"../../components\";\nimport { useSearchStackoverflow } from \"../../services/stackoverflow\";\n\ninterface Props {\n  query: string;\n}\n\nexport default function StackOverflowSearch({ query }: Props) {\n  const { data, isLoading } = useSearchStackoverflow({\n    query,\n    page: 1,\n    pageSize: 5,\n  });\n\n  return (\n    <SearchResults src=\"Stackoverflow\" isLoading={isLoading}>\n      <div className=\"flex p-4 overflow-auto flex-wrap\">\n        {data?.items?.map((item) => (\n          <div\n            key={item.question_id}\n            className=\"m-2 p-4 border border-solid rounded w-80 flex flex-col\"\n          >\n            <div className=\"flex items-center mb-4\">\n              <img\n                src={item.owner.profile_image}\n                className=\"rounded-full border border-solid\"\n                width={50}\n                height={50}\n                alt={item.owner.display_name}\n              />\n              <span className=\"ml-4\">{item.owner.display_name}</span>\n            </div>\n            <p\n              dangerouslySetInnerHTML={{ __html: item.title }}\n              className=\"mb-2\"\n            />\n            <div className=\"flex-1\" />\n            <div className=\"flex items-center justify-between\">\n              <span>Views: {item.view_count}</span>\n              <a\n                className=\"text-sky-600 underline text-right\"\n                href={item.link}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Show\n              </a>\n            </div>\n          </div>\n        ))}\n      </div>\n    </SearchResults>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\nimport GiphySearch from \"./giphy\";\nimport StackOverflowSearch from \"./stackoverflow\";\n\nexport default function Search() {\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const query = params.get(\"q\") ?? \"\";\n\n  return (\n    <div>\n      <StackOverflowSearch query={query} />\n      <GiphySearch query={query} />\n    </div>\n  );\n}\n"],"names":["keys","stackoverflow","process","giphy","useSearchGiphy","query","useQuery","limit","offset","fetch","appConfig","then","res","json","searchGiphy","GiphySearch","data","isLoading","src","className","map","item","embed_url","frameBorder","allowFullScreen","title","slug","rating","href","url","target","rel","id","useSearchStackoverflow","page","pageSize","searchStackoverflow","StackOverflowSearch","items","owner","profile_image","width","height","alt","display_name","dangerouslySetInnerHTML","__html","view_count","link","question_id","Search","location","useLocation","URLSearchParams","search","get"],"sourceRoot":""}